#include <iostream>
#include <vector>
#include <string>

using namespace std;

// Функция для подсчёта количества правильных скобочных последовательностей
// в заданном шаблоне, где '?' можно заменить на '(' или ')'
int countValidParentheses( string& pattern) {
    int n = pattern.size();

    // dp[i][j] = количество способов получить баланс j после обработки i символов
    // Размеры: (n+1) x (n+1), чтобы вместить все возможные балансы
    vector<vector<long long>> dp(n + 1, vector<long long>(n + 1, 0));
    
    // Базовый случай: пустая строка с балансом 0 - 1 способ
    dp[0][0] = 1;

    // Перебираем все символы шаблона (от 1 до n)
    for (int i = 1; i <= n; ++i) {
        char c = pattern[i - 1];
        // Перебираем все возможные значения баланса (от 0 до n)
        for (int j = 0; j <= n; ++j) {
            if (c == '(') {
                // Если символ '(', то баланс увеличивается на 1
                // Добавляем способы из dp[i-1][j-1] (если j > 0)
                if (j > 0) {
                    dp[i][j] += dp[i - 1][j - 1];
                }
            }
            else if (c == ')') {
                // Если символ ')', то баланс уменьшается на 1
                // Добавляем способы из dp[i-1][j+1] (если j+1 <= n)
                if (j + 1 <= n) {
                    dp[i][j] += dp[i - 1][j + 1];
                }
            }
            else if (c == '?') {
                // Если символ '?', то он может быть '(' или ')'
                // Добавляем способы для обоих вариантов
                if (j > 0) {
                    dp[i][j] += dp[i - 1][j - 1];// Вариант '('
                }
                if (j + 1 <= n) {
                    dp[i][j] += dp[i - 1][j + 1];// Вариант ')'
                }
            }
        }
    }

    // Ответ - количество способов получить баланс 0 после обработки всех n символов
    return dp[n][0];
}

int main() {
    string pattern;
    cin >> pattern;
    cout << countValidParentheses(pattern) << endl;
    return 0;
}